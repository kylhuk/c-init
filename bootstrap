#!/bin/bash
set -e

echo "=== Starting bootstrap process ==="

# --- Ensure Swap is Created and Mounted ---
if ! swapon --show | grep -q '/swapfile'; then
    echo "No swap detected. Creating and mounting a 2GB swap file..."
    if command -v fallocate &>/dev/null; then
        fallocate -l 2G /swapfile
    else
        dd if=/dev/zero of=/swapfile bs=1M count=2048
    fi
    chmod 600 /swapfile
    mkswap /swapfile
    swapon /swapfile
    echo "/swapfile none swap sw 0 0" >> /etc/fstab
fi

# --- Install Prerequisites ---
apt-get update && apt-get install -y git curl ufw openssl golang-go wget

# --- Check the Current Go Version ---
CURRENT_GO_VERSION=$(go version | awk '{print $3}' | sed 's/go//')
echo "Current Go version: $CURRENT_GO_VERSION"

# If the version is less than 1.21, upgrade it to Go 1.21.1.
if dpkg --compare-versions "$CURRENT_GO_VERSION" lt "1.21"; then
    echo "Current Go version ($CURRENT_GO_VERSION) is less than required 1.21. Upgrading to Go 1.21.1..."
    wget https://dl.google.com/go/go1.21.1.linux-amd64.tar.gz -O /tmp/go1.21.1.linux-amd64.tar.gz
    rm -rf /usr/local/go
    tar -C /usr/local -xzf /tmp/go1.21.1.linux-amd64.tar.gz
    export PATH=/usr/local/go/bin:$PATH
    echo "Upgraded Go version: $(go version)"
fi

# --- Set Up Persistent Pulumi Passphrase ---
PASSFILE="/root/.pulumi-passphrase"
if [ -f "$PASSFILE" ]; then
    export PULUMI_CONFIG_PASSPHRASE_FILE="$PASSFILE"
    echo "Using existing Pulumi passphrase from $PASSFILE"
else
    PASS=$(openssl rand -base64 32)
    echo "$PASS" > "$PASSFILE"
    chmod 600 "$PASSFILE"
    export PULUMI_CONFIG_PASSPHRASE_FILE="$PASSFILE"
    echo "Generated and saved new Pulumi passphrase."
fi

# --- Install Pulumi if Needed ---
if ! command -v pulumi &>/dev/null; then
    echo "Installing Pulumi..."
    curl -fsSL https://get.pulumi.com | sh
    export PATH=$HOME/.pulumi/bin:$PATH
fi

if ! command -v pulumi &>/dev/null; then
    echo "Pulumi installation failed or is not in PATH."
    exit 1
fi

# --- Clone the Repository ---
REPO_URL="https://github.com/kylhuk/c-init.git"
WORKDIR="/opt/pulumi-bootstrap"
rm -rf "$WORKDIR"
echo "Cloning repository from $REPO_URL..."
git clone "$REPO_URL" "$WORKDIR"

# --- Change to the Pulumi Project Directory ---
cd "$WORKDIR/pulumi"

# --- Ensure Go Module is Correctly Set Up ---
echo "Resetting Go module dependencies..."
rm -f go.mod go.sum # Delete old module files to avoid version conflicts
go mod init alpstar
go get github.com/pulumi/pulumi/sdk/v3
go get github.com/pulumi/pulumi-random/sdk/v3
go get github.com/pulumi/pulumi-command/sdk/v3
go mod tidy # Clean up any unnecessary dependencies

# --- Log in to Pulumi ---
echo "Logging into Pulumi..."
pulumi login file://~/.pulumi

# --- Define and Initialize the Stack ---
STACK_NAME="organization/alpstar/dev"
echo "Initializing stack '$STACK_NAME'..."
if pulumi stack select --cwd "$WORKDIR/pulumi" "$STACK_NAME"; then
    echo "Stack '$STACK_NAME' selected."
else
    pulumi stack init --cwd "$WORKDIR/pulumi" "$STACK_NAME"
fi

echo "Deploying infrastructure with Pulumi..."
pulumi up --cwd "$WORKDIR/pulumi" --yes --stack "$STACK_NAME"

echo "=== Bootstrap process complete ==="
