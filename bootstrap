#!/bin/bash
set -e

echo "=== Starting bootstrap process ==="

# Update packages and install basic tools.
apt-get update && apt-get install -y git curl ufw openssl golang-go wget

# Check the current Go version.
CURRENT_GO_VERSION=$(go version | awk '{print $3}' | sed 's/go//')
echo "Current Go version: $CURRENT_GO_VERSION"

# If the version is less than 1.21, upgrade it to Go 1.21.1.
if dpkg --compare-versions "$CURRENT_GO_VERSION" lt "1.21"; then
    echo "Current Go version ($CURRENT_GO_VERSION) is less than required 1.21. Upgrading to Go 1.21.1..."
    wget https://dl.google.com/go/go1.21.1.linux-amd64.tar.gz -O /tmp/go1.21.1.linux-amd64.tar.gz
    rm -rf /usr/local/go
    tar -C /usr/local -xzf /tmp/go1.21.1.linux-amd64.tar.gz
    export PATH=/usr/local/go/bin:$PATH
    echo "Upgraded Go version: $(go version)"
fi

# Define the passphrase file path.
PASSFILE="/root/.pulumi-passphrase"
if [ -f "$PASSFILE" ]; then
    export PULUMI_CONFIG_PASSPHRASE_FILE="$PASSFILE"
    echo "Using existing Pulumi passphrase from $PASSFILE"
else
    PASS=$(openssl rand -base64 32)
    echo "$PASS" > "$PASSFILE"
    chmod 600 "$PASSFILE"
    export PULUMI_CONFIG_PASSPHRASE_FILE="$PASSFILE"
    echo "Generated and saved new Pulumi passphrase: $PASS"
fi

# Check for Pulumi; if not found, install it.
if ! command -v pulumi &>/dev/null; then
  echo "Installing Pulumi..."
  curl -fsSL https://get.pulumi.com | sh
  export PATH=$PATH:$HOME/.pulumi/bin
fi

# Verify Pulumi is installed.
if ! command -v pulumi &>/dev/null; then
  echo "Pulumi installation failed or is not in PATH."
  exit 1
fi

# Clone the repository using HTTPS.
REPO_URL="https://github.com/kylhuk/c-init.git"
WORKDIR="/opt/pulumi-bootstrap"
rm -rf "$WORKDIR"
echo "Cloning repository from $REPO_URL..."
git clone "$REPO_URL" "$WORKDIR"

# Change directory into the pulumi project directory.
cd "$WORKDIR/pulumi"

# Check if a go.mod file exists; if not, initialize a module.
if [ ! -f go.mod ]; then
    echo "No go.mod file found; initializing module..."
    go mod init alpstar
    go mod tidy
fi

# Log in to Pulumi using the local file backend.
echo "Logging into Pulumi..."
pulumi login file://~/.pulumi

# Define the fully qualified stack name.
# Ensure that the project name here ("alpstar") matches your Pulumi.yaml.
STACK_NAME="organization/alpstar/dev"

echo "Initializing stack '$STACK_NAME'..."
if pulumi stack select --cwd "$WORKDIR/pulumi" "$STACK_NAME"; then
    echo "Stack '$STACK_NAME' selected."
else
    pulumi stack init --cwd "$WORKDIR/pulumi" "$STACK_NAME"
fi

echo "Deploying infrastructure with Pulumi..."
pulumi up --cwd "$WORKDIR/pulumi" --yes --stack "$STACK_NAME"

echo "=== Bootstrap process complete ==="
